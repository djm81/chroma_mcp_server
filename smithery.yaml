# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml

startCommand:
  type: stdio
  configSchema:
    # JSON Schema defining the configuration options for the MCP.
    type: object
    properties:
      client_type:
        type: string
        enum: ["ephemeral", "persistent", "http", "cloud"]
        description: "Type of Chroma client to use"
        default: "ephemeral"
      data_dir:
        type: string
        description: "Path to data directory for persistent client"
      host:
        type: string
        description: "Host address for HTTP client"
      port:
        type: string
        description: "Port for HTTP client"
      ssl:
        type: boolean
        description: "Whether to use SSL for HTTP client"
        default: false
      tenant:
        type: string
        description: "Tenant ID for Cloud client"
      database:
        type: string
        description: "Database name for Cloud client"
      api_key:
        type: string
        description: "API key for Cloud client"
    required: []
  commandFunction:
    # A JS function that produces the CLI command based on the given config to start the MCP on stdio.
    |-
    (config) => {
      const args = ['chroma-mcp-server'];
      
      if (config.client_type) {
        args.push('--client-type', config.client_type);
      }
      
      if (config.data_dir) {
        args.push('--data-dir', config.data_dir);
      }
      
      if (config.host) {
        args.push('--host', config.host);
      }
      
      if (config.port) {
        args.push('--port', config.port);
      }
      
      if (config.ssl) {
        args.push('--ssl', 'true');
      }
      
      if (config.tenant) {
        args.push('--tenant', config.tenant);
      }
      
      if (config.database) {
        args.push('--database', config.database);
      }
      
      if (config.api_key) {
        args.push('--api-key', config.api_key);
      }
      
      return { command: 'python', args: ['-m', 'chroma_mcp.server'] };
    }
  exampleConfig:
    client_type: "ephemeral" 